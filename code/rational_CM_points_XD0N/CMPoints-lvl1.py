## this code will determine if there are rational CM points on a Shimura curve
## at level 1 but with arbitrary Atkin-Lehner quotient
## only works for maximal CM orders currently

# determines if an integer D
def is_CM_disc(D):
    if D >= 0:
        return false
    elif D % 4 == 0:
        return true
    elif squarefree_part(D) % 4 == 1:
        return true
    else:
        return false

def CM_order(D):
    if not is_CM_disc(D):
        print("Error: D is not a CM discriminant")
        return false
    return IntegerRing().extension(x^2 - D,'a')

def maximal_CM_order(D):
    if (not is_fundamental_discriminant(D)) or D >= 0:
        print("Error: D is not a fundamental CM discriminant")
        return false
    return QuadraticField(D).ring_of_integers()

def is_quat_disc(D):
    return D > 0 and D.is_squarefree() and len(D.prime_factors()) % 2 == 0

# determines if a given (maximal) CM discriminant gives rational CM points on
# the Shimura curve at level 1 quotiented by a subgroup of Atkin-Lehner
# input: D = quaternion discriminant, d = CM discriminant,
#   Wnorms = the set of norms of elements of AL that we are quotienting by
#   NOTE: Wnorms should all be divisors of D.
# output: true or false depending on if there are rational CM points on this
#   quotient Shimura curve at level 1.
def has_rational_CM_pts_lvl1(D,d,Wnorms):
    # need to include some basic error checking first
    for m in Wnorms:
        if D % m != 0:
            print("ERROR: Wnorms is invalid")
            return false

    S = maximal_CM_order(d)
    PicS = S.class_group()

    # first check that there are CM points
    for p in D.prime_factors():
        if len(S.ideal(p).factor()) > 1:
            print("Note: there are no CM points for this discriminant!")
            return false

    # first check if PicS acts trivially on the quotient
    # let Psub be the subgroup of PicS "generated by W"
    Psubgens = []
    for m in Wnorms:
        if d % m == 0:
            Psubgens.append(PicS(prod([fact[0] for fact in S.ideal(m).factor()])))
    Psub = PicS.subgroup(Psubgens)
    if Psub.order() != PicS.order():
        print("Note: PicS does not act trivially on these CM points")
        return false

    # now check complex conjugation
    for m in Wnorms:
        if d % (D/m) == 0:
            return true
    # if we get to this point, then we should have rational CM points!
    print("Note: complex conjugation does not act trivially")
    return false
